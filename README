# Lottery Result Monitor and Analyzer This application monitors the K3 lottery results from the API endpoint and performs advanced analysis on new results as they appear. ## Features - Fetches lottery results every second using dynamic timestamps - Detects new results immediately when they appear - Triggers analysis logic within 0-2 seconds of new results - Advanced statistical analysis and pattern detection - Real-time visualization dashboard with charts and graphs - Configurable settings via config.py - Multiple operation modes (CLI, GUI, test) - Comprehensive logging system ## Setup 1. Install the required dependencies: ``` pip install -r requirements.txt ``` 2. Run the application in your preferred mode: ``` # CLI monitoring mode (default) python main.py --mode monitor # GUI dashboard mode python main.py --mode dashboard # Test mode python main.py --mode test ``` ## Components - **main.py**: Main entry point with command-line arguments - **lottery_monitor.py**: Core monitoring functionality - **lottery_analyzer.py**: Advanced analysis algorithms - **dashboard.py**: GUI dashboard with real-time visualization - **config.py**: Centralized configuration settings - **test_lottery_monitor.py**: Test suite for verification - **run_lottery_monitor.py**: Helper script for background execution ## Configuration All settings can be customized in `config.py`, including: - API endpoint URL - Polling interval - Analysis window sizes - Logging settings - Maximum history size You can also override some settings via command-line arguments: ``` python main.py --interval 0.5 --log-level DEBUG ``` ## How It Works - The monitor polls the API endpoint at the configured interval with a fresh timestamp - When a new result is detected (by comparing issue numbers), it triggers the analysis logic - The analyzer performs multiple types of analysis: - Basic analysis (sum, odd/even, etc.) - Pattern analysis (trends, sequences) - Statistical analysis (mean, median, distribution) - Trend analysis (moving averages, cycles) - Results are logged and can be visualized in the dashboard ## Dashboard The dashboard provides a real-time visualization of lottery results and analysis: - Results table with the latest draws - Sum value chart showing trends - Premium digit distribution - Moving averages - Odd/Even distribution - Live log viewer To launch the dashboard: ``` python main.py --mode dashboard ``` ## Background Execution To run the monitor as a background process: ``` python run_lottery_monitor.py ``` ## Logging All activities are logged to multiple files: - main.log: Main application logs - lottery_monitor.log: Monitoring activity - lottery_analysis.log: Analysis results - dashboard.log: Dashboard activity The logs include information about: - API requests - New results detection - Analysis results - Any errors or exceptions ## Extending the Analysis You can extend the analysis by modifying the `LotteryAnalyzer` class in `lottery_analyzer.py`. The current implementation includes: - Basic analysis (sum, odd/even, premium digits) - Pattern detection (increasing/decreasing/alternating) - Statistical analysis (mean, median, mode, standard deviation) - Trend analysis (moving averages, cycle detection) Add your own analysis algorithms as needed.
