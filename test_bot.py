import json import logging from bot import GameResult, StrategyEngine, Prediction # Configure logging logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s') logger = logging.getLogger(__name__) def test_strategies(): """Test all strategies with sample data""" # Create sample game results sample_results = [ # Most recent results first GameResult("10458", [2, 2, 3], 7, 1625000000), # Sum 7 GameResult("10457", [4, 5, 5], 14, 1624999940), # Sum 14 GameResult("10456", [3, 3, 1], 7, 1624999880), # Sum 7 GameResult("10455", [6, 5, 4], 15, 1624999820), # Sum 15 GameResult("10454", [2, 3, 3], 8, 1624999760), # Sum 8 GameResult("10453", [4, 4, 4], 12, 1624999700), # Sum 12 GameResult("10452", [3, 3, 3], 9, 1624999640), # Sum 9 GameResult("10451", [5, 5, 3], 13, 1624999580), # Sum 13 GameResult("10450", [2, 2, 4], 8, 1624999520), # Sum 8 GameResult("10449", [5, 6, 2], 13, 1624999460), # Sum 13 ] # Add more historical data (40+ periods) for i in range(40): period = str(10448 - i) # Create a mix of results, avoiding 3 and 18 sum_val = (i % 11) + 4 # Values between 4 and 14 sample_results.append(GameResult(period, [1, 1, sum_val-2], sum_val, 1624999400 - (i * 60))) # Initialize strategy engine strategy_engine = StrategyEngine() # Run all strategies strategy_results = strategy_engine.analyze(sample_results) # Print results logger.info("Strategy Test Results:") for strategy_name, result in strategy_results.items(): logger.info(f"{strategy_name}: {'Passed' if result else 'Failed'}") # Create a prediction prediction = Prediction("10458", "10467", strategy_results) # Print prediction confidence passed_count = sum(1 for result in strategy_results.values() if result) logger.info(f"Prediction confidence: {passed_count}/10 strategies confirmed") logger.info(f"Is confident: {prediction.is_confident()}") # Print prediction message logger.info("\nPrediction Message:") logger.info(prediction.format_message()) def main(): logger.info("Starting Bot Test") test_strategies() logger.info("Test Complete") if __name__ == "__main__": main()
